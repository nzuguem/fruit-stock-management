version: 3

# Global Properties
silent: true

tasks:
  default:
    desc: List Tasks.
    cmd: task -l

  doctor:
    desc: Verify that the development workstation has all the tools needed to contribute to the project.
    cmds:
      # Verify Docker
      - docker version &> /dev/null && echo "✅ Docker" || echo "❌ Docker"
      # Verify Docker Compose
      - (docker-compose version &> /dev/null || docker compose version &> /dev/null) && echo "✅ Docker Compose" || echo "❌ Docker Compose"
      # Verify Docker Buildx
      - docker buildx version &> /dev/null && echo "✅ Docker Buildx" || echo "❌ Docker Buildx"
      # Verify curl
      - curl -V  &> /dev/null  && echo "✅ Curl" || echo "❌ Curl"
      # Verify Kcat
      - kcat -V &> /dev/null && echo "✅ Kcat" || echo "❌ Kcat"
      # Verify Git
      - git --version &> /dev/null && echo "✅ Git" || echo "❌ Git"
      # Verify Ollama
      - ollama -v &> /dev/null && echo "✅ Ollama" || echo "⚠️  Ollama"
      # Verify Grype
      - grype version &> /dev/null && echo "✅ Grype" || echo "⚠️  Grype"

  run-with-compose:
    desc: Launch application in Compose.
    deps:
      - task: build-app
      - task: build-docker-otel-lgtm
      - task: download-otel-agent
    cmd: docker compose up -d --build --wait
  
  build-docker-otel-lgtm:
    desc: Build Docker of Dev Version of Grafana OTel LGTM.
    internal: true
    cmd: >-
      docker buildx build
      -t grafana/otel-lgtm:dev
      docker-otel-lgtm/docker

  download-otel-agent:
    desc: Download OTel Agent Java Instrumentation.
    internal: true
    cmd: >-
      curl -sL
      https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar
      -o otel-agent.jar

  update-docker-otel-lgtm:
    desc: Update Submodule "docker-otel-lgtm".
    cmd: git submodule update --remote --merge

  log-compose-services:
    desc: Show logs of all Compose Services.
    cmd: docker compose logs -f
  
  log-compose-services/*:
    desc: Show logs of one Compose Service.
    vars:
      SERVICE_NAME: '{{index .MATCH 0}}'
    cmd: docker compose logs {{.SERVICE_NAME}} -f
  
  stop-with-compose:
    desc: Launch application in Compose.
    cmd: docker compose down

  run-with-compose-devservices:
    desc: Launch application in Compose DevServices mode.
    cmd: ./mvnw spring-boot:run

  run-with-testcontainers-devservices:
    desc: Launch application in TestContainers DevServices mode.
    cmd: ./mvnw spring-boot:test-run -Dspring-boot.run.arguments=--spring.docker.compose.enabled=false

  tests:
    desc: Run all Tests.
    cmd: ./mvnw test

  build-app:
    desc: Build Application.
    env:
      MAVEN_CLI_OPTS: '{{.MAVEN_CLI_OPTS}}' # Variable valued when in CI (build-app/ci)
      MAVEN_OPTS: '{{.MAVEN_OPTS}}' # Variable valued when in CI (build-app/ci)
    cmd: ./mvnw $MAVEN_CLI_OPTS package
  
  build-app/ci:
    desc: Build Application for Continuous Integration.
    deps:
      - task: build-app
        vars:      
          MAVEN_CLI_OPTS: >-
            --no-transfer-progress 
            --errors 
            --fail-at-end
            --show-version 
            --batch-mode
          MAVEN_OPTS: >-
            -Djansi.force=true
            -Dstyle.color=always 
  
  scan-sbom:
    desc: Scan SBOM.
    cmd: grype sbom:./target/classes/META-INF/sbom/application.cdx.json --by-cve -o table

  build-docker-image:
    desc: Build Docker image.
    deps:
      - task: build-app
    cmd: docker buildx build -t fruits-stock-management .

  provide-fruit-quantity:
    desc: Provision of fruit. For more details, Run task --summary provide-fruit-quantity.
    summary: |
      Examples:
      - Add new Fruit : task PAYLOAD=apple.new.json provide-fruit-quantity
      - Update Quantity of Existing Fruit : task PAYLOAD=apple.update.json provide-fruit-quantity
    requires: # Make sure these variables are set before running
      vars:
        - PAYLOAD
    cmd: 'curl -X POST http://localhost:8080/fruits -H "Content-Type: application/json" -d @./payloads/{{.PAYLOAD}}'

  sold-out-fruit-quantity:
    internal: true
    requires:
      vars:
        - PAYLOAD
        - KAFKA_PORT
    vars:
      KAFKA_HOST_PORT:
        sh: './tools/get-kafka-exposed-port.sh {{.KAFKA_PORT}}'
    cmd: 'kcat -P -b localhost:{{.KAFKA_HOST_PORT}} -t fruits-sold-out ./payloads/{{.PAYLOAD}}'

  sold-out-fruit-quantity/compose:
    desc: Sold out a certain quantity of fruit. Docker Compose
    deps:
      - task: sold-out-fruit-quantity
        vars:
          KAFKA_PORT: 9092

  sold-out-fruit-quantity/tc:
    desc: Sold out a certain quantity of fruit. Test Containers
    deps:
      - task: sold-out-fruit-quantity
        vars:
          KAFKA_PORT: 9093

  consume-provision-fruit-quantity:
    internal: true
    requires:
      vars:
        - KAFKA_PORT
    vars:
      KAFKA_HOST_PORT:
        sh: './tools/get-kafka-exposed-port.sh {{.KAFKA_PORT}}'
    cmd: 'kcat -C -b localhost:{{.KAFKA_HOST_PORT}} -t fruits-provisioning'

  consume-provision-fruit-quantity/compose:
    desc: Consume Provision. Docker Compose
    deps:
      - task: consume-provision-fruit-quantity
        vars:
          KAFKA_PORT: 9092

  consume-provision-fruit-quantity/tc:
    desc: Consume Provision. Test Containers
    deps:
      - task: consume-provision-fruit-quantity
        vars:
          KAFKA_PORT: 9093

  start-dependency-track:
    desc: Start Dependency Track.
    cmds:
      - docker compose -f compose.dtrack.yml up --wait
      - echo "admin/admin"
      - echo "Visit http://localhost:8282"

  stop-dependency-track:
    desc: Stop Dependency Track.
    cmd: docker compose -f compose.dtrack.yml stop

  upload-sbom-on-dependency-track:
    desc: Upload SBOM on Dependency Track.
    requires:
      vars:
        - DTRACK_API_KEY
    cmds:
      - >
        curl -X "POST" http://localhost:8181/api/v1/bom 
        -H "Content-Type: multipart/form-data"
        -H "X-Api-Key: {{.DTRACK_API_KEY}}"
        -F "autoCreate=true"
        -F "projectName=fruit-stock-management"
        -F "projectVersion=local"
        -F "bom=@target/classes/META-INF/sbom/application.cdx.json"

  sonar-scanner-analysis:
    desc: Analyse Project
    vars:
      SONAR_TOKEN: squ_6b4468de89067a9d92e855299558ac97dd318ab2
      SONAR_HOST_URL: "http://localhost:9000"
    cmd: >-
      docker run --net host --rm -i \
              -v ./:/usr/src -v ./.sonar-cache:/opt/sonar-scanner/.sonar/cache \
              -e SONAR_TOKEN={{.SONAR_TOKEN}} -e SONAR_HOST_URL={{.SONAR_HOST_URL}} \
              sonarsource/sonar-scanner-cli

