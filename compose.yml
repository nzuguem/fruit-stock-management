include:
  - path: dependencies/compose.postgresql.yml
  - path: dependencies/compose.kafka.yml
  - path: dependencies/wiremock/compose.code-provider.yml
  - path: dependencies/compose.mailpit.yml
  - path: dependencies/compose.grafana-lgtm.yml

services:
  app:
    container_name: fruit-stock-management
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    environment:
      # JDBC Datasource
      SPRING_DATASOURCE_URL: jdbc:postgresql://stock-db:5432/stock
      SPRING_DATASOURCE_USERNAME: stock
      SPRING_DATASOURCE_PASSWORD: stock

      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:19092

      # Code Provider
      APPLICATION_CLIENTS_CODE_PROVIDER_URL: http://code-provider-api:8585

      # SMTP
      SPRING_MAIL_HOST: mailpit
      SPRING_MAIL_PORT: 1025

      # Logging
      # The OTel agent will intercept log events and inject “trace_id, span_id, trace_flags” attributes into the MDC (Mapped Diagnostic Contexts)
      # See https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/main/docs/logger-mdc-instrumentation.md
      # LOGGING_PATTERN_LEVEL: trace_id=%X{trace_id} span_id=%X{span_id} trace_flags=%X{trace_flags} %5p

      # OpenTelemetry Agent Configuration
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc # Default Value
      OTEL_EXPORTER_OTLP_ENDPOINT: http://grafana-lgtm:4317 # Default Value
      OTEL_METRIC_EXPORT_INTERVAL: 500  # so we don't have to wait 60s for metrics
      OTEL_RESOURCE_ATTRIBUTES: "service.name=fruit-stock-management,service.instance.id=localhost:8080"
