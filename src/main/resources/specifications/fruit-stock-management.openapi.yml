openapi: 3.0.3
info:
  title: OpenAPI Fruit Stock Management
  description: |-
    Fruit Stock Management Service
  contact:
    name: Nzuguem Fruit Stock Management
    url: https://github.com/nzuguem
    email: nzuguemkevine@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: 1.0.0
paths:
  /fruits/{code}:
    get:
      summary: Verify Fruit Quantity By Code
      description: Verify Fruit Quantity By Code
      operationId: verifyFruitQuantityByCode
      parameters:
        - name: code
          in: path
          description: Code of Product
          required: true
          schema:
            type: string
          examples:
            # For Microcks tests, this fruit must exist in the Store (BDD, etc...)
            # Because in response, this example must return a 200
            kiwi:
              value: KW
            # For Microcks tests, this fruit must not exist in the Store (BDD, etc...)
            # Because in response, this example must return a 404
            test:
              value: TEST
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FruitQuantity'
              examples:
                kiwi:
                  value:
                    code: KW
                    id: 1
                    name: Kiwi
                    quantity: 500
        '404':
          description: Fruit Not Found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
              examples:
                test: {}
  /fruits:
    post:
      summary: Provide Fruit Stock
      description: Provide Fruit Stock
      operationId: provideFruitStock
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FruitQuantity'
            examples:
              # For Microcks tests, this fruit must not exist in the Store (BDD, etc...)
              # Because in response, this example must return a 201 
              test:
                value:
                  name: Test
                  quantity: 500
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FruitQuantity'
              examples:
                test: {}
        '500':
          description: Internal Server Error
components:
  schemas:
    FruitQuantity:
      required:
        - quantity
      type: object
      properties:
        id:
          type: integer
        code:
          type: string
        name:
          type: string
        quantity:
          type: integer
    Problem:
      description: |
        A Problem Details object (RFC 9457).
        
        Additional properties specific to the problem type may be present.    
      type: object
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank  # kept for backwards-compatibility, type will be mandatory in problem-v2
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
      example:
        type: urn:problem-type:exampleOrganization:exampleProblem # "exampleOrganization" should be a short identifier for the organization that defines the problem type. "belgif" is used for problem types standardized in the Belgif REST guide
        href: "https://www.belgif.be/specification/rest/api-guide/#standardized-problem-types" # optional, should refer to documentation of the problem type, either of a belgif standardized or a custom problem type
        title: Description of the type of problem that occurred
        status: 400 # HTTP response status, appropriate for the problem type
        detail: Description of specific occurrence of the problem
        instance: urn:uuid:123e4567-e89b-12d3-a456-426614174000
